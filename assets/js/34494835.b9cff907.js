"use strict";(self.webpackChunkproper_code=self.webpackChunkproper_code||[]).push([[1791],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>g});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=a.createContext({}),c=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},d=function(e){var t=c(e.components);return a.createElement(s.Provider,{value:t},e.children)},p="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),p=c(n),h=i,g=p["".concat(s,".").concat(h)]||p[h]||u[h]||o;return n?a.createElement(g,r(r({ref:t},d),{},{components:n})):a.createElement(g,r({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=n.length,r=new Array(o);r[0]=h;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[p]="string"==typeof e?e:i,r[1]=l;for(var c=2;c<o;c++)r[c]=n[c];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},1149:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>c});var a=n(7462),i=(n(7294),n(3905));const o={title:"(Soft|Firm|Hard)ware",tags:["Practices"]},r=void 0,l={permalink:"/2018/11/13/ware",source:"@site/blog/2018/11-13-ware.md",title:"(Soft|Firm|Hard)ware",description:"The computer, phone or tablet you're reading this on is hardware. The browser that renders it is software. Firmware is somewhere in between. But is it that simple?",date:"2018-11-13T00:00:00.000Z",formattedDate:"November 13, 2018",tags:[{label:"Practices",permalink:"/tags/practices"}],readingTime:4.8,hasTruncateMarker:!0,authors:[],frontMatter:{title:"(Soft|Firm|Hard)ware",tags:["Practices"]},prevItem:{title:"Book Review: Clean Architecture",permalink:"/2018/11/20/cleanarchitecture"},nextItem:{title:"Book Review: Gang of Four",permalink:"/2018/11/06/gangoffour"}},s={authorsImageUrls:[]},c=[],d={toc:c},p="wrapper";function u(e){let{components:t,...n}=e;return(0,i.kt)(p,(0,a.Z)({},d,n,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"The computer, phone or tablet you're reading this on is hardware. The browser that renders it is software. Firmware is somewhere in between. But is it that simple?"),(0,i.kt)("p",null,"I've recently read Clean Architecture by Uncle Bob and loved his definitions of software and hardware:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"hardware is anything that is ",(0,i.kt)("strong",{parentName:"li"},"hard"),", rigid, difficult to modify"),(0,i.kt)("li",{parentName:"ul"},"software on the contrary is ",(0,i.kt)("strong",{parentName:"li"},"soft"),", malleable, easy to modify"),(0,i.kt)("li",{parentName:"ul"},"firmware is ",(0,i.kt)("strong",{parentName:"li"},"firm"),", not as hard as hardware, nor as soft as software")),(0,i.kt)("p",null,"These definitions might sound simplistic, but their simplicity helps greatly in understanding software development."),(0,i.kt)("p",null,"When developing software you can't switch out physical components of the machine on which the software is running, nor can you know when the user will do so, so you must develop your software to be as independent of the hardware as possible. You cannot switch out the operating system or drivers of the machine running your software either, so you must ensure that this is separated from your software as well. Some frameworks like Android's java framework, C#'s .NET framework could also be referred to as firmware."),(0,i.kt)("p",null,"Of course when developing you will have to connect to some hardware or firmware. The important thing to remember is that you want these connections to be isolated from the domain, ideally as a plugin to your software. This will mean that your software can easily be ported to another hardware/firmware without too much work."),(0,i.kt)("p",null,"But the advantage doesn't only lie in the ease of porting the software. It also lies in the ease of modifying and testing of the software. If the hardware or firmware updates, you have a lot less code to modify and inversely if you modify business logic, you don't need to worry about hardware and firmware bridges. Unit testing pure OO logic is easy to do, but unit testing hardware and firmware is very difficult. This is as true for web developers or game developers as it is for embedded developers."),(0,i.kt)("p",null,"So what can you do to reduce the coupling between software and firmware/hardware? Move all the code that refers to firmware into a separate project/assembly/module and make it implement an interface that is defined in your software. You'll probably notice you can refactor a lot of the code you just extracted because there is a lot of duplication."),(0,i.kt)("p",null,"I'll end this with a short example. As many of you know, there's been an update to the GDPR and software must now ask for permissions to use certain data (instead of having those permissions granted to us implicitly). Here's an example of Android code that shows a popup to the user if he hasn't answered the question yet, saves his answer and let's him continue if he accepts or logs him out of the system if he refuses."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'//...\n\npublic class LoginActivity {\n    //...\n    public void login(User user) {\n        //...\n        if (user.complianceAcceptanceIsValid()) {\n            Intent = new Intent(context, DashboardActivity.class);\n            startActivity(intent);\n            return;\n        }\n        \n        new AlertDialog.Builder(context)\n            .setTitle("Compliance Acceptance")\n            .setMessage(R.strings.gdpr_compliance)\n            .setPositiveButton("Accept", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    user.onComplianceAccepted(Calendar.getInstance().getTime());\n                    Intent intent = new Intent(context, DashboardActivity.class);\n                    startActivity(intent);\n                }\n            })\n            .setNegativeButton("Decline", new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    user.logout();\n                    Intent intent = new Intent(context, LoginActivity.class);\n                    startActivity(intent);\n                }\n            })\n            .create()\n            .show();\n    }\n}\n')),(0,i.kt)("p",null,"Now what is the problem with this code? You have logic code pertaining to the compliance (checking if the user already answer the question, saving the answer, logging the user out) mixed in with an Android Dialog, mixed in with what to do after the user answer the dialog. It's very hard to test, and if Android decides to change the API for the AlertDialog, or even remove it, you will probably have a lot of changes to make."),(0,i.kt)("p",null,"So how can we fix this? By moving the Dialog part into another module:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"//...\n\npublic class LoginActivity {\n    private ComplianceDialog complianceDialog;\n\n    //...\n    public void login(User user) {\n        //...\n        complianceDialog.askForCompliance(user, new Dialog.Handler() {\n            @Override\n            public void onAccept() {\n                Intent intent = new Intent(this, DashboardActivity.class);\n                startActivity(intent);\n            }\n            \n            @Override\n            public void onDecline() {\n                Intent intent = new Intent(this, LoginActivity.class);\n                startActivity(intent);\n            }\n        }\n    }\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},'//...\n\npublic class ComplianceDialog {\n    private Dialog dialog;\n    \n    public ComplianceDialog(Dialog dialog) {\n        this.dialog = dialog;\n    }\n    \n    public void askForCompliance(User user, final Dialog.Handler handler) {\n        if (user.complianceAcceptanceIsValid()) {\n            handler.onAccept();\n            return;\n        }\n        \n        dialog.show("Compliance Acceptance", \n            R.strings.gdpr_compliance,\n            "Accept",\n            "Decline",\n            new Dialog.Handler() {\n                @Override\n                public void onAccept() {\n                    user.onComplianceAccepted(Calendar.getInstance().getTime());\n                    handler.onAccept();\n                }\n                \n                @Override\n                public void onDecline() {\n                    user.logout();\n                    handler.onDecline();\n                }\n            }));\n    }\n}\n')),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"public interface Dialog {\n    void show(String title, String message, String accept, String decline, Dialog.Handler handler);\n    \n    public static class Handler {\n        public void onAccept() { }\n        public void onDecline() { }\n    }\n")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-java"},"//...\n\npublic class DialogImpl implements Dialog {\n    private Context context;\n    \n    public Dialog(Context context) {\n        this.context = context;\n    }\n    \n    public void show(String title, String message, String accept, String decline, Dialog.Handler handler) {\n        new AlertDialog.Builder(context)\n            .setTitle(title)\n            .setMessage(message)\n            .setPositiveButton(accept, new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    handler.onAccept();\n                }\n            })\n            .setNegativeButton(decline, new DialogInterface.OnClickListener() {\n                @Override\n                public void onClick(DialogInterface dialog, int which) {\n                    handler.onDecline();\n                }\n            })\n            .create();\n            .show();\n    }\n}\n")),(0,i.kt)("p",null,"Now all the user interaction is within one class (ComplianceDialog), the dialog showing is in another class (DialogImpl) and the next activity responsibility is given yet another class (LoginActivity), meaning it can be reused more easily. The ComplianceDialog does not depend on the Android firmware at all. This also allows us to easily test the ComplianceDialog class by mocking or faking the Dialog interface we pass in. The Dialog interface can also be reused anywhere we need a yes/no dialog to be shown (which often happens) so we can probably refactor a lot of the other uses of AlertDialog in the code with this pattern without too much work."))}u.isMDXComponent=!0}}]);