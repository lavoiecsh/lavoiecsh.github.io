"use strict";(self.webpackChunkproper_code=self.webpackChunkproper_code||[]).push([[3418],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>h});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function l(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var i=n.createContext({}),u=function(e){var t=n.useContext(i),r=t;return e&&(r="function"==typeof e?e(t):l(l({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(i.Provider,{value:t},e.children)},c="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),c=u(r),m=o,h=c["".concat(i,".").concat(m)]||c[m]||d[m]||a;return r?n.createElement(h,l(l({ref:t},p),{},{components:r})):n.createElement(h,l({ref:t},p))}));function h(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,l=new Array(a);l[0]=m;var s={};for(var i in t)hasOwnProperty.call(t,i)&&(s[i]=t[i]);s.originalType=e,s[c]="string"==typeof e?e:o,l[1]=s;for(var u=2;u<a;u++)l[u]=r[u];return n.createElement.apply(null,l)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},764:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={title:"Advent of Code 2021 Recap",tags:["Challenges","Advent","Rust"]},l=void 0,s={permalink:"/2022/01/05/advent2021",source:"@site/blog/2022/01-05-advent2021.md",title:"Advent of Code 2021 Recap",description:"2021 is now over and I have completed the advent of code in Rust. Here are my findings.",date:"2022-01-05T00:00:00.000Z",formattedDate:"January 5, 2022",tags:[{label:"Challenges",permalink:"/tags/challenges"},{label:"Advent",permalink:"/tags/advent"},{label:"Rust",permalink:"/tags/rust"}],readingTime:1.695,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Advent of Code 2021 Recap",tags:["Challenges","Advent","Rust"]},prevItem:{title:"Blog Update: English Only",permalink:"/2022/01/06/english"},nextItem:{title:"Advent of Code 2021",permalink:"/2021/11/20/advent2021"}},i={authorsImageUrls:[]},u=[{value:"Rust",id:"rust",level:3},{value:"Problems were overall good",id:"problems-were-overall-good",level:3},{value:"Final thoughts",id:"final-thoughts",level:3}],p={toc:u},c="wrapper";function d(e){let{components:t,...r}=e;return(0,o.kt)(c,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"2021 is now over and I have completed the advent of code in Rust. Here are my findings."),(0,o.kt)("h3",{id:"rust"},"Rust"),(0,o.kt)("p",null,"Rust has its quirks when writing the code, but the error messages are very clear. "),(0,o.kt)("p",null,"Having worked in other pointer/reference handling languages (C++ mainly), it was pretty easy to pick up. "),(0,o.kt)("p",null,"As I was expecting, performance is absolutely incredible as well."),(0,o.kt)("p",null,"Making trees and graphs is pretty complicated though. Since Rust does a lot of checks on variable lifetimes and borrows as well as stack size, you can't easily have pointers to nodes within a node structure. Most of the problems I ended up a pattern that seems to be called a \"memory arena\" by the Rust community. In this pattern you keep a list of all the nodes, usually in a vector for instant random access, and each node contains the index of other nodes it's referring to instead of a pointer to it. If the tree/graph doesn't change, it's pretty easy to use, but if you need to modify it, it becomes a little more complicated although doable."),(0,o.kt)("h3",{id:"problems-were-overall-good"},"Problems were overall good"),(0,o.kt)("p",null,"Most of the problems were pretty easy to solve algorithmically. Some problems took me more time as I mentioned above because I'm not used to creating trees and graphs in Rust. Another notable mention is problem 24 which is a little more complicated to solve and takes a lot of experimentations before you can figure out how you're supposed to reduce the search space. I wished they didn't put that as the last problem."),(0,o.kt)("p",null,"What I missed the most out of all the problems compared to previous years was a set a problem to made you evolve a previous solution. This was usually done as a assembly-like language you had to write a computer emulator for. I hope they bring something similar back in future years."),(0,o.kt)("h3",{id:"final-thoughts"},"Final thoughts"),(0,o.kt)("p",null,"Overall very fun and Rust was a blast to use."),(0,o.kt)("p",null,"All my code and inputs are available in ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/lavoiecsh/lavoiecsh.github.io/tree/master/code/advent2021"},"advent2021")," for those interested."))}d.isMDXComponent=!0}}]);