"use strict";(self.webpackChunkproper_code=self.webpackChunkproper_code||[]).push([[8218],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var l=r.createContext({}),s=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return r.createElement(l.Provider,{value:t},e.children)},p="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=s(n),h=a,d=p["".concat(l,".").concat(h)]||p[h]||m[h]||o;return n?r.createElement(d,i(i({ref:t},u),{},{components:n})):r.createElement(d,i({ref:t},u))}));function d(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,i=new Array(o);i[0]=h;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c[p]="string"==typeof e?e:a,i[1]=c;for(var s=2;s<o;s++)i[s]=n[s];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5520:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>m,frontMatter:()=>o,metadata:()=>c,toc:()=>s});var r=n(7462),a=(n(7294),n(3905));const o={title:"Day 2: Inventory Management System",tags:["Challenges","Advent","C#"]},i=void 0,c={permalink:"/2018/12/02/advent2018-02",source:"@site/blog/2018/12-02-advent2018-02.md",title:"Day 2: Inventory Management System",description:"So this time around we're working with strings.",date:"2018-12-02T00:00:00.000Z",formattedDate:"December 2, 2018",tags:[{label:"Challenges",permalink:"/tags/challenges"},{label:"Advent",permalink:"/tags/advent"},{label:"C#",permalink:"/tags/c"}],readingTime:1.51,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Day 2: Inventory Management System",tags:["Challenges","Advent","C#"]},prevItem:{title:"Day 3: No Matter How You Slice It",permalink:"/2018/12/03/advent2018-03"},nextItem:{title:"Day 1: Chronal Calibration",permalink:"/2018/12/01/advent2018-01"}},l={authorsImageUrls:[]},s=[],u={toc:s},p="wrapper";function m(e){let{components:t,...n}=e;return(0,a.kt)(p,(0,r.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"So this time around we're working with strings."),(0,a.kt)("p",null,"The first part asks to build a simple checksum type algorithm to ensure the box ids are correct. I ended up solving it with basically just LINQ in C#."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-C#"},"var counts = ids.Select(s => s.GroupBy(c => c).Select(g => g.Count()))\n    .Select(cs =>\n    {\n        var csl = cs.ToList();\n        return new[] {csl.Contains(2), csl.Contains(3)};\n    })\n    .ToList();\nreturn (counts.Count(c => c[0]) * counts.Count(c => c[1])).ToString();\n")),(0,a.kt)("p",null,"The first ",(0,a.kt)("inlineCode",{parentName:"p"},"Select")," returns the number of each character for each id. The second ",(0,a.kt)("inlineCode",{parentName:"p"},"Select")," returns whether those counts contain 2 and 3, meaning the id contains a character twice or contains a character thrice. The last part just multiplies the number of ids containing a multiple of 2 by the number of ids containing a multiple of 3."),(0,a.kt)("p",null,"The second part asks us to find the two matching boxes by finding the two ids that differ by only 1 character. Here I went with a simple brute force of checking all the pairs and returning the first one that matches the criteria."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-C#"},"foreach (var id1 in ids)\n{\n    foreach (var id2 in ids)\n    {\n        if (id1 == id2)\n            continue;\n            var commonLetters = string.Concat(id1.Zip(id2, (c1, c2) => c1 == c2 ? c1 : ' ').Where(c => c != ' '));\n            if (commonLetters.Length == id1.Length - 1)\n                return commonLetters;\n    }\n}\n")),(0,a.kt)("p",null,"I opted again for LINQ to calculate the matching characters. If the two characters match, I return it, otherwise I replace it with a space character which I then remove. The first pair which has 1 less common letters than the number of letters in the id is the one we want. I was afraid running a ",(0,a.kt)("inlineCode",{parentName:"p"},"O(n\xb2)")," algorithm would require too much compute time, but the input was small enough that I didn't need any optimization."))}m.isMDXComponent=!0}}]);