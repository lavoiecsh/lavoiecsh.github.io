"use strict";(self.webpackChunkproper_code=self.webpackChunkproper_code||[]).push([[3825],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>y});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function i(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function a(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?i(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):i(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function s(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},i=Object.keys(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)o=i[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var l=r.createContext({}),u=function(e){var t=r.useContext(l),o=t;return e&&(o="function"==typeof e?e(t):a(a({},t),e)),o},c=function(e){var t=u(e.components);return r.createElement(l.Provider,{value:t},e.children)},d="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},p=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,i=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=u(o),p=n,y=d["".concat(l,".").concat(p)]||d[p]||h[p]||i;return o?r.createElement(y,a(a({ref:t},c),{},{components:o})):r.createElement(y,a({ref:t},c))}));function y(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var i=o.length,a=new Array(i);a[0]=p;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[d]="string"==typeof e?e:n,a[1]=s;for(var u=2;u<i;u++)a[u]=o[u];return r.createElement.apply(null,a)}return r.createElement.apply(null,o)}p.displayName="MDXCreateElement"},8962:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>i,metadata:()=>s,toc:()=>u});var r=o(7462),n=(o(7294),o(3905));const i={title:"Importance of Good Tools",tags:["Practices"]},a=void 0,s={permalink:"/2019/01/28/tools",source:"@site/blog/2019/01-28-tools.md",title:"Importance of Good Tools",description:"There are a lot of tools to work with code now and it's getting harder and harder to choose between the different editors, IDEs, compilers, linkers, build engines, version control systems and such. How do you choose between all of them? I'll focus mainly on editors and IDEs for the moment might come back for other tools later on. My point here is not to tell you which editor or IDE to use or not, but help you choose the correct one for you.",date:"2019-01-28T00:00:00.000Z",formattedDate:"January 28, 2019",tags:[{label:"Practices",permalink:"/tags/practices"}],readingTime:4.525,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Importance of Good Tools",tags:["Practices"]},prevItem:{title:"Book Review: Agile Principles, Patterns, and Practices in C#",permalink:"/2019/02/12/agile-principles-patterns-practices"},nextItem:{title:"Layout Update",permalink:"/2019/01/17/layout-update"}},l={authorsImageUrls:[]},u=[{value:"Solo or Team Work?",id:"solo-or-team-work",level:3},{value:"What language are you working on?",id:"what-language-are-you-working-on",level:3},{value:"Are you using weird key bindings?",id:"are-you-using-weird-key-bindings",level:3},{value:"Paying a little extra might be a good option",id:"paying-a-little-extra-might-be-a-good-option",level:3},{value:"Conclusion",id:"conclusion",level:3}],c={toc:u},d="wrapper";function h(e){let{components:t,...o}=e;return(0,n.kt)(d,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"There are a lot of tools to work with code now and it's getting harder and harder to choose between the different editors, IDEs, compilers, linkers, build engines, version control systems and such. How do you choose between all of them? I'll focus mainly on editors and IDEs for the moment might come back for other tools later on. My point here is not to tell you which editor or IDE to use or not, but help you choose the correct one for you."),(0,n.kt)("h3",{id:"solo-or-team-work"},"Solo or Team Work?"),(0,n.kt)("p",null,'There are concerns when working in a team like having a unified code style that may make you tilt in a certain direction. Most editors and IDEs nowadays come with very complete code style engines to help you format the code the way you want it with as little effort as possible. The important part is that everybody in the team works with the same code style. This helps to reduce "useless" modifications in commits (where only the spacing, indentation or line wrapping changed) which will make it easier to review code. IDEs like the JetBrains suite or Visual Studio with ReSharper offer this out of the box and you can version the code style options so that everybody uses the same settings.  Most of the IDEs will only work if you use the same one (because their settings are saved with a custom format), but some IDEs will read a .editorconfig file containing the code style settings you need.'),(0,n.kt)("p",null,"Check out what your coworkers are using: chances are they'll help you set it up and answer your questions also."),(0,n.kt)("h3",{id:"what-language-are-you-working-on"},"What language are you working on?"),(0,n.kt)("p",null,"Simpler editors handle most languages well, but don't handle any language exceptionally well (except the language in which it was written, or which was written for it like ELisp and VimScript). Having a more specialized IDE for your language will provide a lot of features that editors won't be able to provide (like running, debugging, templates, etc)."),(0,n.kt)("p",null,"What kind of work are you going to do with the language? If it's a simple bash script you won't change for a while, most editors will do the job, but if you're going to work on a larger project for a couple of months, a more specialized IDE will greatly help you. More complete IDEs will often provide refactoring features that will help you write better and faster code."),(0,n.kt)("p",null,"That said, it's always a good idea to have a preferred editor for those times you need to quickly edit a file that's not well supported by your IDE of choice."),(0,n.kt)("h3",{id:"are-you-using-weird-key-bindings"},"Are you using weird key bindings?"),(0,n.kt)("p",null,"This mostly applies to those coming from the olden days of Nano, Emacs and Vim. Back then key bindings weren't common among different editors and so each editor created their own set of key bindings. Nowadays, IDEs will most likely come with a simple set of key bindings but if you don't feel like learning them, you can look into which other key bindings the IDE can support."),(0,n.kt)("p",null,"I started coding using Emacs and have used it extensively for a couple of years of university. When I started working with others, I had to switch and this is a point that made me choose Rider over Visual Studio when working with C#. Visual Studio's support for Emacs key bindings stopped in 2010 and was added as a plugin which didn't work that well for the later versions, while all the JetBrains editors fully support Emacs key bindings (except C-t which has been in their backlog for a while now...). Since I still use Emacs as my main \"quick\" editor, it's nice not having to change between different key bindings for each editor I use."),(0,n.kt)("h3",{id:"paying-a-little-extra-might-be-a-good-option"},"Paying a little extra might be a good option"),(0,n.kt)("p",null,"Obviously when you're looking at fully integrated IDEs, most of them require you to pay a large amount to access a lot of the features. That cost is often easily repaid when you account for the amount of time you save doing a repeated task or writing better code. If you're not sure the cost is worth it, try it out first. JetBrains allows you to try out the next version of the IDE during it's Early Access Program, and offers Community or Student editions of a couple IDEs (just make sure you follow the constraints for these). Microsoft also has a Community edition for Visual Studio so you can try it out. Most of the time the feature differences are available on their website to better help you choose the version you need."),(0,n.kt)("p",null,"Of course, if you're not using the extra features, you can probably check out the free alternatives they have: Eclipse, NetBeans, Android Studio, Visual Studio Code, Atom (and I'm skipping some) or simply use your favourite editor."),(0,n.kt)("h3",{id:"conclusion"},"Conclusion"),(0,n.kt)("p",null,"The IDE is the tool you're going to use most, so make sure you choose the best one for you needs. Try out different tools and check out new tools that come out when possible. Look for plugins that might add features to help you and make some if you feel like you're missing something."),(0,n.kt)("p",null,"P.S.: For those wondering, I've said it a little earlier, but my main tools these days are Intellij IDEA for Java and Android coding, Rider for C#, WebStorm for this blog and Emacs for pretty much all the rest."))}h.isMDXComponent=!0}}]);