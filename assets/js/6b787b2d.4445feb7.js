"use strict";(self.webpackChunkproper_code=self.webpackChunkproper_code||[]).push([[7549],{3905:(e,t,r)=>{r.d(t,{Zo:()=>p,kt:()=>m});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var l=n.createContext({}),c=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},p=function(e){var t=c(e.components);return n.createElement(l.Provider,{value:t},e.children)},u="mdxType",h={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,l=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),u=c(r),d=a,m=u["".concat(l,".").concat(d)]||u[d]||h[d]||o;return r?n.createElement(m,i(i({ref:t},p),{},{components:r})):n.createElement(m,i({ref:t},p))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s[u]="string"==typeof e?e:a,i[1]=s;for(var c=2;c<o;c++)i[c]=r[c];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7437:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>h,frontMatter:()=>o,metadata:()=>s,toc:()=>c});var n=r(7462),a=(r(7294),r(3905));const o={title:"Day 4: Repose Record",tags:["Challenges","Advent","C#"]},i=void 0,s={permalink:"/2018/12/04/advent2018-04",source:"@site/blog/2018/12-04-advent2018-04.md",title:"Day 4: Repose Record",description:"Another fun problem today.",date:"2018-12-04T00:00:00.000Z",formattedDate:"December 4, 2018",tags:[{label:"Challenges",permalink:"/tags/challenges"},{label:"Advent",permalink:"/tags/advent"},{label:"C#",permalink:"/tags/c"}],readingTime:1.255,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Day 4: Repose Record",tags:["Challenges","Advent","C#"]},prevItem:{title:"Day 5: Alchemical Reduction",permalink:"/2018/12/05/advent2018-05"},nextItem:{title:"Day 3: No Matter How You Slice It",permalink:"/2018/12/03/advent2018-03"}},l={authorsImageUrls:[]},c=[],p={toc:c},u="wrapper";function h(e){let{components:t,...r}=e;return(0,a.kt)(u,(0,n.Z)({},p,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Another fun problem today."),(0,a.kt)("p",null,"I started the day with some refactoring of my code from the last three days ensuring everything still ran correctly with my unit tests, moving the creation of elements to a DataProvider interface which is implemented by different classes depending on the type wanted (int, string, claim, and now guard). This also moved the regular expression part of the input handling to the data providers instead of the problem solvers, making the unit tests for the solvers easier and the unit tests for the data providers more complete."),(0,a.kt)("p",null,"My guard class contains the id of the guard and a list of all the intervals where the guard slept. It was pretty easy to build the data by first sorting the lines in the file, as the timestamp was in a easily sortable format."),(0,a.kt)("p",null,"The solution to the first part of the problem is to find the guard with the most minutes asleep (by summing all the intervals for each guard), and then find the minute where he was most asleep."),(0,a.kt)("p",null,"The solution to the second part of the problem is just a invert in the steps for the solution to the first part. Find the minute at which each guard slept the most and then find the guard that slept the most out of those minutes."),(0,a.kt)("p",null,"The code is available in my github repository: ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/lavoiecsh/lavoiecsh.github.io/tree/master/code/advent2018"},"advent solutions code")," and to those interested, check the commit for today as it is a nice exercise in refactoring."))}h.isMDXComponent=!0}}]);