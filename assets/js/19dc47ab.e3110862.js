"use strict";(self.webpackChunkproper_code=self.webpackChunkproper_code||[]).push([[593],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>d});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)n=i[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=a.createContext({}),s=function(e){var t=a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},p=function(e){var t=s(e.components);return a.createElement(c.Provider,{value:t},e.children)},m="mdxType",u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},h=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,i=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=s(n),h=r,d=m["".concat(c,".").concat(h)]||m[h]||u[h]||i;return n?a.createElement(d,o(o({ref:t},p),{},{components:n})):a.createElement(d,o({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var i=n.length,o=new Array(i);o[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[m]="string"==typeof e?e:r,o[1]=l;for(var s=2;s<i;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}h.displayName="MDXCreateElement"},5554:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>o,default:()=>u,frontMatter:()=>i,metadata:()=>l,toc:()=>s});var a=n(7462),r=(n(7294),n(3905));const i={title:"Day 3: No Matter How You Slice It",tags:["Challenges","Advent","C#"]},o=void 0,l={permalink:"/2018/12/03/advent2018-03",source:"@site/blog/2018/12-03-advent2018-03.md",title:"Day 3: No Matter How You Slice It",description:"First problem with a more complicated input and problem. I solved these by making a class defining a claim (containing the id, position, size) and another class defining the canvas (containing a matrix of claims touching each square inch). The claims are created by parsing each line with a regular expression.",date:"2018-12-03T00:00:00.000Z",formattedDate:"December 3, 2018",tags:[{label:"Challenges",permalink:"/tags/challenges"},{label:"Advent",permalink:"/tags/advent"},{label:"C#",permalink:"/tags/c"}],readingTime:1.53,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Day 3: No Matter How You Slice It",tags:["Challenges","Advent","C#"]},prevItem:{title:"Day 4: Repose Record",permalink:"/2018/12/04/advent2018-04"},nextItem:{title:"Day 2: Inventory Management System",permalink:"/2018/12/02/advent2018-02"}},c={authorsImageUrls:[]},s=[],p={toc:s},m="wrapper";function u(e){let{components:t,...n}=e;return(0,r.kt)(m,(0,a.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("p",null,"First problem with a more complicated input and problem. I solved these by making a class defining a claim (containing the id, position, size) and another class defining the canvas (containing a matrix of claims touching each square inch). The claims are created by parsing each line with a regular expression."),(0,r.kt)("p",null,"My first big dilemma was between using a mathematical approach to find the regions of conflict between each pair of claim and using a matrix and just record everything in a matrix. I checked the input for the problem and noticed there was over 1200 claims with areas under 100x100 inches. Calculating the regions for all the pairs requires ",(0,r.kt)("inlineCode",{parentName:"p"},"O(n\xb2)")," calculations which would amount to around 1.5M calculations, while using a matrix would require ",(0,r.kt)("inlineCode",{parentName:"p"},"O(nm\xb2)")," updates to the matrix which would be at most 12M. Evaluating the individual calculations at a larger cost than an update, I opted for the matrix solution as it seemed easier to solve the first part of the solution."),(0,r.kt)("p",null,"Upon reading the first part of the problem, I started with a simple matrix of integers counting the number of claims on each square. The solution was then to count the number of squares where there was only one claim."),(0,r.kt)("p",null,"When I arrived at the second part of the problem, I noticed my solutions wouldn't work as is, but the changes wouldn't be too large. I started by changing my matrix of integers to a matrix of lists of claims, allowing me to specify which claim was touching which square. Once this was done (and my first part was still working), I added some data in the claims to know which claim it conflicted with and how many claims it was in conflict with. With that, I simply returned the identifier of the claim that had no conflicts."))}u.isMDXComponent=!0}}]);