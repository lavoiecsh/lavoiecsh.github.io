"use strict";(self.webpackChunkproper_code=self.webpackChunkproper_code||[]).push([[3005],{3905:(e,t,o)=>{o.d(t,{Zo:()=>c,kt:()=>u});var r=o(7294);function n(e,t,o){return t in e?Object.defineProperty(e,t,{value:o,enumerable:!0,configurable:!0,writable:!0}):e[t]=o,e}function a(e,t){var o=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),o.push.apply(o,r)}return o}function i(e){for(var t=1;t<arguments.length;t++){var o=null!=arguments[t]?arguments[t]:{};t%2?a(Object(o),!0).forEach((function(t){n(e,t,o[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(o)):a(Object(o)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(o,t))}))}return e}function l(e,t){if(null==e)return{};var o,r,n=function(e,t){if(null==e)return{};var o,r,n={},a=Object.keys(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||(n[o]=e[o]);return n}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)o=a[r],t.indexOf(o)>=0||Object.prototype.propertyIsEnumerable.call(e,o)&&(n[o]=e[o])}return n}var s=r.createContext({}),h=function(e){var t=r.useContext(s),o=t;return e&&(o="function"==typeof e?e(t):i(i({},t),e)),o},c=function(e){var t=h(e.components);return r.createElement(s.Provider,{value:t},e.children)},m="mdxType",p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var o=e.components,n=e.mdxType,a=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=h(o),d=n,u=m["".concat(s,".").concat(d)]||m[d]||p[d]||a;return o?r.createElement(u,i(i({ref:t},c),{},{components:o})):r.createElement(u,i({ref:t},c))}));function u(e,t){var o=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var a=o.length,i=new Array(a);i[0]=d;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l[m]="string"==typeof e?e:n,i[1]=l;for(var h=2;h<a;h++)i[h]=o[h];return r.createElement.apply(null,i)}return r.createElement.apply(null,o)}d.displayName="MDXCreateElement"},527:(e,t,o)=>{o.r(t),o.d(t,{assets:()=>s,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>l,toc:()=>h});var r=o(7462),n=(o(7294),o(3905));const a={title:"Advent of Code Conclusion",tags:["Challenges","Advent"]},i=void 0,l={permalink:"/2019/01/03/advent2018",source:"@site/blog/2019/01-03-advent2018.md",title:"Advent of Code Conclusion",description:"This will be a small conclusion on my experience working of the advent of code challenge this year. I managed to finish all the problems on the 27th of December. My point was not to race for the 100 first places as other do, but simply complete the problems, which is why I was completing them the morning after they were posted, and didn't mind spending a little more time, especially since some of the problems were pretty complicated. I completed all the problems in 1621th place.",date:"2019-01-03T00:00:00.000Z",formattedDate:"January 3, 2019",tags:[{label:"Challenges",permalink:"/tags/challenges"},{label:"Advent",permalink:"/tags/advent"}],readingTime:3.975,hasTruncateMarker:!0,authors:[],frontMatter:{title:"Advent of Code Conclusion",tags:["Challenges","Advent"]},prevItem:{title:"Layout Update",permalink:"/2019/01/17/layout-update"},nextItem:{title:"Day 15: Beverage Bandits",permalink:"/2018/12/27/advent2018-15"}},s={authorsImageUrls:[]},h=[{value:"Which problems gave me more trouble?",id:"which-problems-gave-me-more-trouble",level:3},{value:"So what did I learn from these problems?",id:"so-what-did-i-learn-from-these-problems",level:3},{value:"What would I change next time?",id:"what-would-i-change-next-time",level:3}],c={toc:h},m="wrapper";function p(e){let{components:t,...o}=e;return(0,n.kt)(m,(0,r.Z)({},c,o,{components:t,mdxType:"MDXLayout"}),(0,n.kt)("p",null,"This will be a small conclusion on my experience working of the advent of code challenge this year. I managed to finish all the problems on the 27th of December. My point was not to race for the 100 first places as other do, but simply complete the problems, which is why I was completing them the morning after they were posted, and didn't mind spending a little more time, especially since some of the problems were pretty complicated. I completed all the problems in 1621th place."),(0,n.kt)("p",null,"My code for all the problems, including unit tests and data providers for input parsing is available ",(0,n.kt)("a",{parentName:"p",href:"https://github.com/lavoiecsh/lavoiecsh.github.io/tree/master/code/advent2018"},"here"),"."),(0,n.kt)("h3",{id:"which-problems-gave-me-more-trouble"},"Which problems gave me more trouble?"),(0,n.kt)("ul",null,(0,n.kt)("li",{parentName:"ul"},"12: The second part for this problem requires calculating a large number of generations and I didn't initially think about looking at what is actually happening after each generation so I initially tried to make it work for the full fifty billion generations. The solution was to find a pattern to reduce the number of iterations to calculate."),(0,n.kt)("li",{parentName:"ul"},"15: I initially put this one aside as it seemed to take a lot of time to code (and I was right). The problem isn't difficult, but there are a lot of business rules in the description and it's easy to misread or misunderstand one or two."),(0,n.kt)("li",{parentName:"ul"},"18: The second part for this problem also requires calculating a large number of generations. As for problem 12, I didn't start looking at the actual data to find a pattern which could be used to calculate the solution a lot more efficiently."),(0,n.kt)("li",{parentName:"ul"},"19: The second part requires reverse engineering the code, and I initially didn't think about that."),(0,n.kt)("li",{parentName:"ul"},'23: The second part requires finding a point in a very large space that touches the most range "spheres". After a couple of attempts at calculating it, I ended up going on the subreddit for some help and took a solution from there. This is the only problem where I had to look for a solution.')),(0,n.kt)("h3",{id:"so-what-did-i-learn-from-these-problems"},"So what did I learn from these problems?"),(0,n.kt)("p",null,"If you want to compete in the race, you need to start the moment the problem goes up and don't think about writing clean code (at least until you've entered your answers). Most of the problems can be solved with less than 100 lines of code in most languages so it's still a manageable size for code you're going to work on only for a couple of minutes or hours. For the problems with more rules (like 15 and 24), I think it starts to become more important to write clean code so you can easily fix the rules to match the problem description."),(0,n.kt)("p",null,"Units tests were very useful to me, especially since all the problems give some simpler cases that you can use as test cases. For programmers that are used to work with test driven development, this doesn't really slow them down, but some of the test cases took me a lot of time to setup, mainly because I decided to split the input reading from the problem solving, which meant I had to write my test cases using a mock object and mocking the data read instead of simply reading from a different file or starting with a different string or string array. Splitting both helped to solved the problems, because I didn't have to think about input parsing at the same time but it did add a little more work as I had to create more tests and classes for the data providers I created."),(0,n.kt)("h3",{id:"what-would-i-change-next-time"},"What would I change next time?"),(0,n.kt)("p",null,"Working with C# and writing clean solutions was a very good exercise for the blog, but did require a lot more time to solve some of the problems. A lot of the problems require working with matrices and there are some way better languages to do that than C# (like Python or MatLab/Octave). All in all I think Python would probably be one of the best languages to solve these problems: it has a simple syntax which makes it easy to write small programs, it has powerful libraries like SciPy, NumPy, Z3 and many more which can help solve a lot of the problems, it's efficient enough that most solutions won't require minutes to compute and input reading is easy enough that you won't lose time with it."),(0,n.kt)("p",null,"Thinking outside the box earlier. If the problem requires running a lot of iterations, it's probably because there's a pattern you need to find. If the problem gives you code, you might need to reverse engineer it. If the problem makes you work with strings and characters, don't change it to lists of enums, it just takes too much time for nothing."))}p.isMDXComponent=!0}}]);