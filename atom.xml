<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://lavoiecsh.github.io/</id>
    <title>Proper Code</title>
    <updated>2023-05-22T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://lavoiecsh.github.io/"/>
    <subtitle>A blog about proper coding</subtitle>
    <icon>https://lavoiecsh.github.io/img/favicon.ico</icon>
    <rights>Copyright © 2023 Sebastien Lavoie-Courchesne.</rights>
    <entry>
        <title type="html"><![CDATA[Docusaurus]]></title>
        <id>https://lavoiecsh.github.io/2023/05/22/docusaurus</id>
        <link href="https://lavoiecsh.github.io/2023/05/22/docusaurus"/>
        <updated>2023-05-22T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Finally an update to the UI for this blog.]]></summary>
        <content type="html"><![CDATA[<p>Finally an update to the UI for this blog.</p><p>I've been working at <a href="https://www.appdirect.com/" target="_blank" rel="noopener noreferrer">AppDirect</a> for 4 years now and over the past year we've been trying to remake our internal and external documentation.</p><p>It all started with a hackathon where myself and 3 other people decided to try out Docusaurus for our internal glossary. Within a little more than a day, we had the glossary up and running in Docusaurus, with a couple of extra features.</p><p>A couple of weeks later, we decided to convert all of our internal documentation to use Docusaurus. Since I had experience setting it up, I started the project. Our UI and UX teams helped in making it more attractive and personalized. They have also started converting our external developer documentation to use Docusaurus as well.</p><p>During all this time, I've been thinking about my blog and how it doesn't look so good when I compared it with just what's out of the box for Docusaurus. So over the past few weeks, I've converted my own website to Docusaurus.</p><p>Adding features will be a lot easier, adding content will be a lot easier. Hopefully that should give me some incentive to create more of it.</p>]]></content>
        <category label="Blog" term="Blog"/>
        <category label="Update" term="Update"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Blog Update: English Only]]></title>
        <id>https://lavoiecsh.github.io/2022/01/06/english</id>
        <link href="https://lavoiecsh.github.io/2022/01/06/english"/>
        <updated>2022-01-06T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[In an effort to reduce the maintenance time for this blog and hopefully have a little more content. I've decided to remove the french translations of my blog posts.]]></summary>
        <content type="html"><![CDATA[<p>In an effort to reduce the maintenance time for this blog and hopefully have a little more content. I've decided to remove the french translations of my blog posts.</p><p>I'm expecting to add a couple more features as well and make the site prettier, since it should now be a little easier to do so.</p>]]></content>
        <category label="Blog" term="Blog"/>
        <category label="Update" term="Update"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Advent of Code 2021 Recap]]></title>
        <id>https://lavoiecsh.github.io/2022/01/05/advent2021</id>
        <link href="https://lavoiecsh.github.io/2022/01/05/advent2021"/>
        <updated>2022-01-05T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[2021 is now over and I have completed the advent of code in Rust. Here are my findings.]]></summary>
        <content type="html"><![CDATA[<p>2021 is now over and I have completed the advent of code in Rust. Here are my findings.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="rust">Rust<a href="#rust" class="hash-link" aria-label="Direct link to Rust" title="Direct link to Rust">​</a></h3><p>Rust has its quirks when writing the code, but the error messages are very clear. </p><p>Having worked in other pointer/reference handling languages (C++ mainly), it was pretty easy to pick up. </p><p>As I was expecting, performance is absolutely incredible as well.</p><p>Making trees and graphs is pretty complicated though. Since Rust does a lot of checks on variable lifetimes and borrows as well as stack size, you can't easily have pointers to nodes within a node structure. Most of the problems I ended up a pattern that seems to be called a "memory arena" by the Rust community. In this pattern you keep a list of all the nodes, usually in a vector for instant random access, and each node contains the index of other nodes it's referring to instead of a pointer to it. If the tree/graph doesn't change, it's pretty easy to use, but if you need to modify it, it becomes a little more complicated although doable.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="problems-were-overall-good">Problems were overall good<a href="#problems-were-overall-good" class="hash-link" aria-label="Direct link to Problems were overall good" title="Direct link to Problems were overall good">​</a></h3><p>Most of the problems were pretty easy to solve algorithmically. Some problems took me more time as I mentioned above because I'm not used to creating trees and graphs in Rust. Another notable mention is problem 24 which is a little more complicated to solve and takes a lot of experimentations before you can figure out how you're supposed to reduce the search space. I wished they didn't put that as the last problem.</p><p>What I missed the most out of all the problems compared to previous years was a set a problem to made you evolve a previous solution. This was usually done as a assembly-like language you had to write a computer emulator for. I hope they bring something similar back in future years.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="final-thoughts">Final thoughts<a href="#final-thoughts" class="hash-link" aria-label="Direct link to Final thoughts" title="Direct link to Final thoughts">​</a></h3><p>Overall very fun and Rust was a blast to use.</p><p>All my code and inputs are available in <a href="https://github.com/lavoiecsh/lavoiecsh.github.io/tree/master/code/advent2021" target="_blank" rel="noopener noreferrer">advent2021</a> for those interested.</p>]]></content>
        <category label="Challenges" term="Challenges"/>
        <category label="Advent" term="Advent"/>
        <category label="Rust" term="Rust"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Advent of Code 2021]]></title>
        <id>https://lavoiecsh.github.io/2021/11/20/advent2021</id>
        <link href="https://lavoiecsh.github.io/2021/11/20/advent2021"/>
        <updated>2021-11-20T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Another year, another advent, more code!]]></summary>
        <content type="html"><![CDATA[<p>Another year, another advent, more code!</p><p>This will be my fourth year attempting the different challenges:</p><ul><li>2018: completed everything in C#</li><li>2019: partially completed in Haskell</li><li>2020: completed everything in C++</li><li>2021: this will be the year of Rust</li></ul><p>Doing code challenges in C++ is a breeze. It's super performant so you can get away with some slight imperfections in your code and still get some ridiculously fast execution times. Newer version syntaxes allow for easier readability and less code writing as well.</p><p>Due to lack of time, I didn't want to embark on another functional language challenge as they usually require a lot of knowledge of the language if you want to get some decent performances.</p><p>But I still wanted to learn a new language. So I chose Rust.</p><p>It's another imperative language similar to C and C++, but with a cleaner syntax.</p><p>Some quick tests have shown it has some pretty incredible performances as well, no wonder it's used in operating systems.</p><p>I converted some problems from 2019 in Rust <a href="https://github.com/lavoiecsh/lavoiecsh.github.io/tree/master/code/advent2019/rust" target="_blank" rel="noopener noreferrer">here</a> to get a hang of it.</p><p>New solutions will come hopefully each day in <a href="https://github.com/lavoiecsh/lavoiecsh.github.io/tree/master/code/advent2021" target="_blank" rel="noopener noreferrer">advent2021</a></p>]]></content>
        <category label="Challenges" term="Challenges"/>
        <category label="Advent" term="Advent"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Thinking in resolvers]]></title>
        <id>https://lavoiecsh.github.io/2020/10/15/thinking-in-resolvers</id>
        <link href="https://lavoiecsh.github.io/2020/10/15/thinking-in-resolvers"/>
        <updated>2020-10-15T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Everything in GraphQL revolves around resolvers. It's important to understand this to better develop application exposing GraphQL APIs.]]></summary>
        <content type="html"><![CDATA[<p>Everything in GraphQL revolves around resolvers. It's important to understand this to better develop application exposing GraphQL APIs.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="table-of-contents">Table of Contents<a href="#table-of-contents" class="hash-link" aria-label="Direct link to Table of Contents" title="Direct link to Table of Contents">​</a></h2><ol><li><a href="#resolver-anatomy">Resolver Anatomy</a></li><li><a href="#field-within-a-type">Field within a type</a></li><li><a href="#the-special-but-not-so-special-cases">The special (but not so special) cases</a></li><li><a href="#federation">Federation</a></li><li><a href="#directives">Directives</a></li></ol><h2 class="anchor anchorWithStickyNavbar_LWe7" id="resolver-anatomy">Resolver Anatomy<a href="#resolver-anatomy" class="hash-link" aria-label="Direct link to Resolver Anatomy" title="Direct link to Resolver Anatomy">​</a></h2><p>A resolver is a function returning the value of a field within a type. It takes in four arguments:</p><ol><li>parent: the instance returned by the parent resolver</li><li>args/input: any additional input to the field (usually what's in parentheses in the schema)</li><li>context: an object built by the server before resolver each query that usually contains globally accessible information and information about the current query</li><li>info: information about the fields, types, queries being executed</li></ol><p>Most of the time we use the first three arguments to resolve a field. The fourth argument is usually discarded as the information is seldom useful.</p><p>For most GraphQL server implementations, resolvers are referenced within a hierarchy of Type to field.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="field-within-a-type">Field within a type<a href="#field-within-a-type" class="hash-link" aria-label="Direct link to Field within a type" title="Direct link to Field within a type">​</a></h2><p>Each field within a type uses a resolver to define the value to return for this field and a particular instance of the parent type. Looking at the following schema:</p><div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Product</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ProductType</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">name</span><span class="token punctuation" style="color:#393A34">(</span><span class="token attr-name" style="color:#00a4db">locale</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">Locale</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token scalar">String</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This product type has three fields: id, type and name. Assuming the user wants all three fields to be returned and the product instance is already resolved, three resolvers will be called to get the value for aech field. In each case the parent parameter will be the instance of the product type that has been resolved previously and the context will receive what was built by the server. Additionally, the args parameter will be empty for the id and type fields, and contain the given locale for the name field. Each of these resolvers will be included in the Product type.</p><p>There is a default resolver that takes the value from the parent if that parent has a property matching the field we are resolving. You can override this resolver to add more logic when resolving the field:</p><ul><li>Not returning the value if the user doesn't have sufficient permissions</li><li>Returning a different value in some cases</li><li>Returning a calculated value</li><li>Fetching data from a different table/collection in your database</li></ul><h2 class="anchor anchorWithStickyNavbar_LWe7" id="the-special-but-not-so-special-cases">The special (but not so special) cases<a href="#the-special-but-not-so-special-cases" class="hash-link" aria-label="Direct link to The special (but not so special) cases" title="Direct link to The special (but not so special) cases">​</a></h2><p>Query, Mutation and Subscription types in GraphQL let you define the basic API you are exposing to the clients. These are referred to as the "root" types and are predefined by the specification.</p><p>These are still types in the sense that they contain fields that will be resolved through resolvers just like any other field within a type. The only different is that there is no default resolver for these types and you must then write the resolvers yourself. As for the arguments, they function the same way as for other field resolvers, although the parent parameter will be defined by the GraphQL implementation you use (usually null or an empty object).</p><p>Since these are still types from the GraphQL point of view, each query is a field with a resolver within the Query type, each mutation is a field with a resolver within the Mutation type, and each subscription is a field with a resolver within the Subscription type.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="federation">Federation<a href="#federation" class="hash-link" aria-label="Direct link to Federation" title="Direct link to Federation">​</a></h2><p>Federation lets you define fields on types outside your domain and lets you return references to types outside your domain for fields in your domain. The gateway will handle which resolver to call for each field.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="allowing-extensions">Allowing extensions<a href="#allowing-extensions" class="hash-link" aria-label="Direct link to Allowing extensions" title="Direct link to Allowing extensions">​</a></h3><p>When creating a type that could be extended by other services, you need to use the <code>@key</code> directive to indicate which fields will be exposed to the other services.</p><div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Product</span><span class="token plain"> </span><span class="token directive function" style="color:#d73a49">@key</span><span class="token punctuation" style="color:#393A34">(</span><span class="token attr-name" style="color:#00a4db">fields</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"id state"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">state</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ProductState</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">type</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ProductType</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>The key in this case will contain the id and state fields, but not the type field.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="extending">Extending<a href="#extending" class="hash-link" aria-label="Direct link to Extending" title="Direct link to Extending">​</a></h3><p>When extending a type to add a new field, you create an extended type in your schema using the <code>@extends</code> keyword. The <code>@key</code> and <code>@external</code> directives indicates the fields that are required for you to be able to resolve your additional field, and that these are coming from another service.</p><div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token directive function" style="color:#d73a49">@extends</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">Product</span><span class="token plain"> </span><span class="token directive function" style="color:#d73a49">@key</span><span class="token punctuation" style="color:#393A34">(</span><span class="token attr-name" style="color:#00a4db">fields</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"id state"</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> </span><span class="token directive function" style="color:#d73a49">@external</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">state</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ProductState</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"> </span><span class="token directive function" style="color:#d73a49">@external</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">integrationConfiguration</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">IntegrationConfiguration</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>When resolving the integrationConfiguration field for a product, the gateway will send the id and state in the parent parameter of the resolver, allowing you to correctly resolve the integrationConfiguration field. This resolver will belong to the Product type within the integration configuration service.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="referencing">Referencing<a href="#referencing" class="hash-link" aria-label="Direct link to Referencing" title="Direct link to Referencing">​</a></h3><p>When referencing an outside type within your schema, you need to include an __typename and all the key fields so that the gateway can resolve this reference. For example, again from the integration configuration service:</p><div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">type</span><span class="token plain"> </span><span class="token class-name">IntegrationConfiguration</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token scalar">ID</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">state</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token class-name">ProductState</span><span class="token operator" style="color:#393A34">!</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token attr-name" style="color:#00a4db">products</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token class-name">Product</span><span class="token punctuation" style="color:#393A34">]</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>To create a backwards reference to the products linked to this integration configuration, you need to create a resolver named <code>products</code> in the IntegrationConfiguration type. This resolver will need to return an array of objects containing the id and state of the referenced product as well as the type.</p><div class="language-json codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-json codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"__typename"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"Product"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"id"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"123"</span><span class="token punctuation" style="color:#393A34">,</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property" style="color:#36acaa">"state"</span><span class="token operator" style="color:#393A34">:</span><span class="token plain"> </span><span class="token string" style="color:#e3116c">"WORKING"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><h3 class="anchor anchorWithStickyNavbar_LWe7" id="resolving-references">Resolving References<a href="#resolving-references" class="hash-link" aria-label="Direct link to Resolving References" title="Direct link to Resolving References">​</a></h3><p>With the resolved value above, the gateway then turns to the product service and asks to resolve the reference through the <code>__resolveReference</code> resolver. This is a special case resolver which only takes the parent and context arguments. The parent will contain the value for the key fields returned by the other service and the context will be generated just like any other resolver. This special resolver will be part of the <code>Product</code> type within the product service.</p><h3 class="anchor anchorWithStickyNavbar_LWe7" id="notes-on-queries">Notes on Queries<a href="#notes-on-queries" class="hash-link" aria-label="Direct link to Notes on Queries" title="Direct link to Notes on Queries">​</a></h3><p>With federation, queries will be coming to your service from the GraphQL gateway. These are usually a little obscure but it's useful to know what they look like so you can use them when testing resolvers without the gateway.</p><div class="language-graphql codeBlockContainer_Ckt0 theme-code-block" style="--prism-color:#393A34;--prism-background-color:#f6f8fa"><div class="codeBlockContent_biex"><pre tabindex="0" class="prism-code language-graphql codeBlock_bY9V thin-scrollbar"><code class="codeBlockLines_e6Vv"><span class="token-line" style="color:#393A34"><span class="token keyword" style="color:#00009f">query</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token property-query">_entities</span><span class="token punctuation" style="color:#393A34">(</span><span class="token attr-name" style="color:#00a4db">representations</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">[</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token attr-name" style="color:#00a4db">__typename</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token description string" style="color:#e3116c">"</span><span class="token description string language-markdown" style="color:#e3116c">Product</span><span class="token description string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token attr-name" style="color:#00a4db">id</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token description string" style="color:#e3116c">"</span><span class="token description string language-markdown" style="color:#e3116c">123</span><span class="token description string" style="color:#e3116c">"</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token attr-name" style="color:#00a4db">state</span><span class="token punctuation" style="color:#393A34">:</span><span class="token plain"> </span><span class="token constant" style="color:#36acaa">WORKING</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">]</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token operator" style="color:#393A34">...</span><span class="token plain"> </span><span class="token keyword" style="color:#00009f">on</span><span class="token plain"> </span><span class="token class-name">Product</span><span class="token plain"> </span><span class="token punctuation" style="color:#393A34">{</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">      </span><span class="token keyword" style="color:#00009f">type</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">  </span><span class="token punctuation" style="color:#393A34">}</span><span class="token plain"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"></span><span class="token punctuation" style="color:#393A34">}</span><br></span></code></pre><div class="buttonGroup__atx"><button type="button" aria-label="Copy code to clipboard" title="Copy" class="clean-btn"><span class="copyButtonIcons_eSgA" aria-hidden="true"><svg viewBox="0 0 24 24" class="copyButtonIcon_y97N"><path fill="currentColor" d="M19,21H8V7H19M19,5H8A2,2 0 0,0 6,7V21A2,2 0 0,0 8,23H19A2,2 0 0,0 21,21V7A2,2 0 0,0 19,5M16,1H4A2,2 0 0,0 2,3V17H4V3H16V1Z"></path></svg><svg viewBox="0 0 24 24" class="copyButtonSuccessIcon_LjdS"><path fill="currentColor" d="M21,7L9,19L3.5,13.5L4.91,12.09L9,16.17L19.59,5.59L21,7Z"></path></svg></span></button></div></div></div><p>This kind of query is used by the gateway to resolve references to objects and additional fields defined in another service with federation. The representations in the <code>_entities</code> query defines all the parent objects with all the required fields to resolve whatever was requested by the client.</p><p>Since the type field resides in the Product type definition for the product service, it will first resolve the product through the <code>__resolveReference</code> resolver, passing in the given representation. It will then resolve the type field on the result. This can be used to ensure our <code>__resolveReference</code> resolver works as expected.</p><p>If we ask for the integrationConfiguration field instead of the type field in the same query, we get a query being sent to the integration configuration service to resolve the integration configuration. This will call the integrationConfiguration resolver within the Product type in the intgeration configuration service and pass as parent the given representation. This can be used to test additional fields for extended types in isolation, without needing to run the gateway and the service where the type was originally defined.</p><p>Representations must contain all the fields defined in the key directive for a type as well as the <code>__typename</code>. Notice how this is identical to what we return when we want to resolve a type belonging to another service.</p><h2 class="anchor anchorWithStickyNavbar_LWe7" id="directives">Directives<a href="#directives" class="hash-link" aria-label="Direct link to Directives" title="Direct link to Directives">​</a></h2><p>Once resolvers are clear, you can start to look at directives. A directive is an additional element to the schema to add logic around a resolver. Some directives are predefined by the specification. Federation adds some we previously mentioned:</p><ul><li>The <code>@extends</code> directive on a type indicates the type we are referencing is part of another service within the global schema. This ensures there are no collisions within a federated schema.</li><li>The <code>@key</code> directive on a type ensures the key fields are resolved for an instance and extracts them for referencing within federation.</li><li>The <code>@external</code> directive on a field indicates the field is not resolved by our service.</li></ul><p>Directives are executed not when the field is resolved but when the server is started. This means you do not have access to the parent, input and context at the moment the field is resolved, but you can exchange the defined resolver with another one. For those fluent in Object-Oriented design patterns, you can think of them as decorators.</p><p>Directives can act on a multitude of elements within a GraphQL schema, from the schema itself, to types, fields, enum, enum values, scalars, arguments, input fields, etc. Typical use cases for using directives on fields is to perform validations on the input or verifying the user has the correct authorization before calling the resolver. They can also be used to modify the arguments being sent, such as lower-casing strings, or modify the return value from the resolver, suach as formatting or translating the output.</p><p>When adding validations to a query or mutation, remember these are still fields within a Query or Mutation type. You need to define a field directive on the query o rmutation. Within the directive implementation, you will then have access to the resolver function being called and can wrap it to validate the input being sent to the query or mutation.</p>]]></content>
        <category label="Technologies" term="Technologies"/>
        <category label="GraphQL" term="GraphQL"/>
    </entry>
</feed>